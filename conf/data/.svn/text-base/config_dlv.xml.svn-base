<?xml version="1.0"?>

<!-- ******************************************************************************
     *** DO NOT INSTANTIATE THE IACCESS ROOT VARIABLE. IT IS DONE AUTOMATICALLY. ***
     ****************************************************************************** -->
<root>
   
   <WorkingDirectory>
	   IACCESS_ROOT;work_dir
   </WorkingDirectory>

   <DLVDirectory>
	  IACCESS_ROOT;data;dlv
   </DLVDirectory>
   
   <!-- Please specify the DLV executable name as "dlv" with NO extension. It is added automatically.  
   -->
   <DLVExecutableName> 
       dlv
   </DLVExecutableName>
  
   <!-- "-cautious" mode is the preferred one. You can also chose a "-brave" mode  
Please use "-silent" options always.  
If brave reasoning please update DLVKeywords4SUccessfulDeduction . (with "bravely")
-->
   <DLVDeductionCommandPromptOptions>
        -silent -cautious -filter=,   
   </DLVDeductionCommandPromptOptions>

<!-- We use "FDmin" since we do not expect negation-as-failure in the access policy.  
You should change to "FD" if you want to use negation-as-failure in the access policy.
Do not remove "-silent" option. -->
   <DLVAbductionCommandPromptOptions>
        -FDmin -silent    
   </DLVAbductionCommandPromptOptions>
   
<!-- Below we cannot use FDmin because of internal computations/transformations. It must be FD. -->
  <DLVAbductionOneStepCommandPromptOptions>
        -FD -silent  
  </DLVAbductionOneStepCommandPromptOptions>
   
<!-- Below we specify intended to output credentials but prefixed with 
DLVOneStepPrefix4Credentials string specified below. -->

  <DLVOneStepDeductionCommandPromptOptions>
   -silent -pfilter=prefix_extCred  -pfilter=prefix_id
  </DLVOneStepDeductionCommandPromptOptions>

  <DLVOneStepPrefix4Credentials> prefix_ </DLVOneStepPrefix4Credentials>

  <!-- Below we use DLVExtendedTemplate4Credential in filtering the output of abducibles.
 Also use the identity predicate.                               
 -->
   <DLVComputeAbduciblesCommandPromptOptions>
        -silent -pfilter=extCred -pfilter=id
   </DLVComputeAbduciblesCommandPromptOptions>

   <!-- Below we specify the Access Policy Files of a partner.  
In the case of more than one files, separate them with a comma.
 -->
   <DeductionServicePolicyFiles>
	     IACCESS_ROOT;data;security_policies;access_policy.txt
   </DeductionServicePolicyFiles>
   
   <!-- Below we specify the Credential Policy Files of a partner.  
      In the case of more than one files, separate them with a comma. 
 -->
    <DeductionCredentialPolicyFiles>
	     IACCESS_ROOT;data;security_policies;credential_policy.txt
   </DeductionCredentialPolicyFiles>   
   
   <!-- Below we specify the Disclosure Policy Files of a partner.  
      In the case of more than one files, separate them with a comma. 
 -->
   <ComputeAbduciblesPolicyFiles>
	     IACCESS_ROOT;data;security_policies;attribute_weights.txt, 
	     IACCESS_ROOT;data;security_policies;disclosure_policy.txt, 
	     IACCESS_ROOT;data;security_policies;extended_credentials.txt
   </ComputeAbduciblesPolicyFiles>

   <!-- Below we specify the Access Policy Files for service protection of a partner.  
      In the case of more than one files, separate them  with a comma. 
 -->
   <AbductionPolicyFiles>
	     IACCESS_ROOT;data;security_policies;access_policy.txt, 
	     IACCESS_ROOT;data;security_policies;extended_to_normal_credentials.txt
   </AbductionPolicyFiles>

   <!-- Below we specify the Access Policy Files for credential protection of a partner.  
      In the case of more than one files, separate them with a comma. 
 -->
   <AbductionCredentialPolicyFiles>
	     IACCESS_ROOT;data;security_policies;credential_policy.txt, 
	     IACCESS_ROOT;data;security_policies;extended_to_normal_credentials.txt
   </AbductionCredentialPolicyFiles>

<!-- All is already internally prepared. Below we use a temp file for the computation. 
Please do not remove change it unless you exactly know what you want to do. 
-->
   <OneStepAbductionPolicyFiles>
	     IACCESS_ROOT;data;security_policies;extended_to_normal_credentials.txt
   </OneStepAbductionPolicyFiles>


  <!-- ***************************************************************************************
       **** Below output keywords indicating successful execution of the access query.          ****
       **** Please note that they ALL must be satisfied and that they are CASE SENSITIVE  ****
       **** The order of specifiying keywords is important.                               ****
       **** Please use the delimiter "," as specified below      ****
       *************************************************************************************** -->
   <DLVKeywords4SUccessfulDeduction>
        cautiously , true
   </DLVKeywords4SUccessfulDeduction>

   <!-- Below we define a set of predicate names used in the security policies.
The actual content is placed internally.
Please DO NOT specify any delimiters at the end of a predicate, they will be placed automatically.
e.g. 
 cred(${content})          
  after replacement ...   
cred(user,attr,issuer).  
 -->
   <DLVTemplate4Credential>
       cred(${content})
   </DLVTemplate4Credential>

   <DLVExtendedTemplate4Credential>
       extCred(${content})
   </DLVExtendedTemplate4Credential>

   <DLVTemplate4Certificate>
       id(${content})
   </DLVTemplate4Certificate>
   
   <DLVTemplate4Service>
       grant(${content})
   </DLVTemplate4Service>

   <DLVTemplate4ServiceRequest>
      requestedService(${content})
   </DLVTemplate4ServiceRequest>
   

   <!-- *********************************************************************************************************
      Below the predicate for current system time. It has the JAVA Date().toString() format   

     predicate_name(dow, mon, dd, hh, mm, ss, zzz, yyyy)
     
     where:

    * dow is the day of the week: sun, mon, tue, wed, thu, fri, sat.
    * mon is the month: jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec.
    * dd is the day of the month: 01 through 31 , as two decimal digits.
    * hh is the hour of the day: 00 through 23 , as two decimal digits.
    * mm is the minute within the hour: 00 through 59 , as two decimal digits.
    * ss is the second within the minute: 00 through 61 , as two decimal digits.
    * zzz is the time zone (and may reflect daylight saving time). 
         Standard time zone abbreviations include those recognized by the method parse. 
         If time zone information is not available, then zzz is empty - that is, it consists of no characters at all.
         IN OUR CASE predicate_name(dow, mon, dd, hh, mm, ss, yyyy)
         TEST in Java if THE FORMAT IS THE RIGHT TUPLE
    * yyyy is the year, as four decimal digits. ALWAYS yyyy > 1970.
********************************************************************************************************* -->
<PredicateName4SystemTimeNow>
       TNOW
</PredicateName4SystemTimeNow>

   <!-- *********************************************************************************************************
     Below the predicate indicating Authorization Time by now since it was the initial service request.   

     predicate_name(ms)
     
     where:
       ms denotes the current milliseconds passed since the request for a service has been received.
********************************************************************************************************* -->
<PredicateName4TNTimeByNow>
  TNNOW
</PredicateName4TNTimeByNow>

</root>
